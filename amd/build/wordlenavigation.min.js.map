{"version":3,"file":"wordlenavigation.min.js","sources":["../src/wordlenavigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the gapfill question type.\n *\n * @copyright  2024 Joseph RÃ©zeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module qtype_guessit/wordlenavigation\n *\n * This script controls navigation in the Wordle game.\n */\n\n/**\n * Initialize the input gaps functionalities.\n */\nexport function init() {\n/* eslint-disable no-unused-vars */\n\n    // Make correctly filled in gaps readonly\n    const correctGaps = document.querySelectorAll('input.correct');\n    correctGaps.forEach((input) => {\n      input.readOnly  = true; // Make the input readonly.\n      input.style.cursor = \"not-allowed\"; // Set the cursor style.\n    });\n\n    // Reset incorrect and partiallycorrect letters upon retry.\n    /*\n    const incorrectGaps = document.querySelectorAll('input.incorrect, input.partiallycorrect');\n    incorrectGaps.forEach((element) => {\n      element.classList.remove('incorrect');\n      element.classList.remove('partiallycorrect');\n    });\n*/\n    document.querySelectorAll('[id^=\"question-\"]').forEach(question => {\n        const gaps = question.querySelectorAll('input[type=\"text\"][name*=\"p\"]');\n        const checkButton = question.querySelector('button[type=\"submit\"].submit');\n\n        gaps.forEach((element, index) => {\n            // Empty the gap when clicked, if it's not correct\n            element.addEventListener(\"click\", () => {\n                if (!element.classList.contains('correct')) {\n                    element.value = ''; // Empty the gap on click\n                }\n            });\n            // Listen for keydown to capture the key press and prevent more than one character\n            element.addEventListener(\"keydown\", (event) => {\n                // Allow only ASCII alphabet letters\n                if ((event.which >= 65 && event.which <= 90) || (event.which >= 97 && event.which <= 122)) {\n                    if (element.value.length >= 1) {\n                        event.preventDefault(); // Prevent entering more than one character\n                    }\n                } else {\n                    event.preventDefault(); // Prevent any other characters\n                }\n            });\n            // Listen for keydown to capture the key press and keyup to move focus\n            element.addEventListener(\"keydown\", (event) => {\n                // Allow default action to let the letter be typed\n                if ((event.which >= 65 && event.which <= 90) || (event.which >= 97 && event.which <= 122)) {\n                    // Letter will be typed by default, no need to prevent it here\n                }\n            });\n\n            element.addEventListener(\"keyup\", (event) => {\n                // After the letter has been typed, move to the next input\n                if ((event.key === 'Tab' || event.which >= 65 && event.which <= 90) || (event.which >= 97 && event.which <= 122)) {\n                    let nextIndex = index + 1;\n\n                    // Skip over any gaps with class \"correct\"\n                    while (nextIndex < gaps.length && gaps[nextIndex].classList.contains('correct')) {\n                        nextIndex++;\n                    }\n\n                    if (nextIndex < gaps.length) {\n                        // Check if the next non-\"correct\" gap is not empty, then empty it\n                        if (gaps[nextIndex].value.trim() !== '') {\n                            gaps[nextIndex].value = ''; // Empty the gap\n                        }\n                        // Move to the next non-\"correct\" gap\n                        gaps[nextIndex].focus();\n                    } else if (checkButton) {\n                        // If it's the last gap in the question, move focus to the \"Check\" button\n                        checkButton.focus();\n                    }\n                }\n            });\n        });\n    });\n\n}"],"names":["document","querySelectorAll","forEach","input","readOnly","style","cursor","question","gaps","checkButton","querySelector","element","index","addEventListener","classList","contains","value","event","which","length","preventDefault","key","nextIndex","trim","focus"],"mappings":";;;;;;;AA+BO,WAIiBA,SAASC,iBAAiB,iBAClCC,SAASC,QACnBA,MAAMC,UAAY,EAClBD,MAAME,MAAMC,OAAS,aAAa,IAWpCN,SAASC,iBAAiB,qBAAqBC,SAAQK,WACnD,MAAMC,KAAOD,SAASN,iBAAiB,iCACjCQ,YAAcF,SAASG,cAAc,gCAE3CF,KAAKN,SAAQ,CAACS,QAASC,SAEnBD,QAAQE,iBAAiB,SAAS,KACzBF,QAAQG,UAAUC,SAAS,aAC5BJ,QAAQK,MAAQ,GACpB,IAGJL,QAAQE,iBAAiB,WAAYI,QAE5BA,MAAMC,OAAS,IAAMD,MAAMC,OAAS,IAAQD,MAAMC,OAAS,IAAMD,MAAMC,OAAS,IAC7EP,QAAQK,MAAMG,QAAU,GACxBF,MAAMG,iBAGVH,MAAMG,gBACV,IAGJT,QAAQE,iBAAiB,WAAYI,QAE5BA,MAAMC,OAAS,IAAMD,MAAMC,OAAS,IAAQD,MAAMC,OAAS,IAAMD,MAAMC,KAE5E,IAGJP,QAAQE,iBAAiB,SAAUI,QAE/B,GAAmB,QAAdA,MAAMI,KAAiBJ,MAAMC,OAAS,IAAMD,MAAMC,OAAS,IAAQD,MAAMC,OAAS,IAAMD,MAAMC,OAAS,IAAM,CAC9G,IAAII,UAAYV,MAAQ,EAGxB,KAAOU,UAAYd,KAAKW,QAAUX,KAAKc,WAAWR,UAAUC,SAAS,YACjEO,YAGAA,UAAYd,KAAKW,QAEoB,KAAjCX,KAAKc,WAAWN,MAAMO,SACtBf,KAAKc,WAAWN,MAAQ,IAG5BR,KAAKc,WAAWE,SACTf,aAEPA,YAAYe,OAEpB,IACF,GACJ,GAGV,CAAC"}