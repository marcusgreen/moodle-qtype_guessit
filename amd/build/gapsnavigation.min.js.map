{"version":3,"file":"gapsnavigation.min.js","sources":["../src/gapsnavigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the guessit question type.\n *\n * @copyright  2025 Joseph RÃ©zeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module qtype_guessit/gapsnavigation\n *\n * This script controls the navigation in the GuessIt game.\n */\n\n/**\n * Initialize the input gaps functionalities.\n */\nexport function init() {\n\n    // Make correctly filled in gaps readonly\n    const correctGaps = document.querySelectorAll('input.correct');\n    correctGaps.forEach((input) => {\n      input.readOnly = true; // Make the input readonly.\n      input.style.cursor = \"not-allowed\"; // Set the cursor style.\n    });\n\n    // Control keyboard navigation in the gaps\n    document.querySelectorAll('[id^=\"question-\"]').forEach(question => {\n        // Get the list of all the guessit gaps in current question\n        const gaps = question.querySelectorAll('input[type=\"text\"][name*=\"p\"]');\n        // Get the ID of current Check button\n        const checkButton = question.querySelector('button[type=\"submit\"].submit');\n        // Add event listeners to all gaps\n        // element is the current gap itself and index is its index/rank in the gaps list\n        gaps.forEach((element, index) => {\n            element.addEventListener(\"keydown\", (event) => {\n                // If space or tab keys are pressed do these actions\n                if (event.key === ' ' || (event.key === 'Tab' && !event.shiftKey)) {\n                    // Prevent default behaviour of pressed keys\n                    event.preventDefault();\n                    // Only move to the next gap if the current one is not empty\n                    if (element.value.trim() !== '') {\n                        let nextIndex = index + 1;\n                        // Skip over any gaps with class \"correct\"\n                        while (nextIndex < gaps.length && gaps[nextIndex].classList.contains('correct')) {\n                            nextIndex++;\n                        }\n                        if (nextIndex < gaps.length) {\n                            // Move to the next non-\"correct\" gap\n                            var nextGap = gaps[nextIndex];\n                            nextGap.focus();\n                            var length = nextGap.value.length;\n                            // Set caret at the end of the gap contents (value)\n                            nextGap.setSelectionRange(length, length);\n                            if (gaps[nextIndex].classList.contains('incorrect')) {\n                                gaps[nextIndex].value = '';\n                                gaps[nextIndex].classList.remove('incorrect');\n                            }\n                        } else if (checkButton) {\n                            // If it's the last gap in the question, move focus to the \"Check\" button\n                            checkButton.focus();\n                        }\n                    }\n                }\n                // If shift and tab keys are pressed do these actions\n                if (event.key === 'Tab' && event.shiftKey) {\n                    // Prevent default behaviour of pressed keys\n                    event.preventDefault();\n                    let prevIndex = index - 1;\n                        // Skip over any gaps with class \"correct\"\n                        while (prevIndex !== -1 && gaps[prevIndex].classList.contains('correct')) {\n                            prevIndex--;\n                        }\n                        if (prevIndex !== -1) {\n                            // Move to the next non-\"correct\" gap\n                            var prevGap = gaps[prevIndex];\n                            prevGap.focus();\n                            if (gaps[prevIndex].classList.contains('incorrect')) {\n                                gaps[prevIndex].value = '';\n                                gaps[prevIndex].classList.remove('incorrect');\n                            }\n                        }\n                }\n            });\n\n            element.addEventListener(\"click\", () => {\n                if (element.classList.contains('incorrect')) {\n                    element.value = ''; // Empty the incorrect gap value on click\n                    element.classList.remove('incorrect'); // And remove the incorrect class\n                }\n            });\n\n            if (element.classList.contains('auto-grow-input')) {\n                // Enable the input fields auto-grow feature (if set in the question options)\n                element.addEventListener(\"input\", function() {\n                    element.style.width = \"auto\"; // Reset width\n                    // Set the width to the content size plus 1 px for adjustment.\n                    element.style.width = (element.scrollWidth + 1) + \"px\";\n                });\n                // Trigger the event on page load to adjust the input width for pre-filled values\n                element.dispatchEvent(new Event('input'));\n            }\n        });\n    });\n\n}"],"names":["document","querySelectorAll","forEach","input","readOnly","style","cursor","question","gaps","checkButton","querySelector","element","index","addEventListener","event","key","shiftKey","preventDefault","value","trim","nextIndex","length","classList","contains","nextGap","focus","setSelectionRange","remove","prevIndex","width","scrollWidth","dispatchEvent","Event"],"mappings":";;;;;;;AA+BO,WAGiBA,SAASC,iBAAiB,iBAClCC,SAASC,QACnBA,MAAMC,UAAW,EACjBD,MAAME,MAAMC,OAAS,aAAa,IAIpCN,SAASC,iBAAiB,qBAAqBC,SAAQK,WAEnD,MAAMC,KAAOD,SAASN,iBAAiB,iCAEjCQ,YAAcF,SAASG,cAAc,gCAG3CF,KAAKN,SAAQ,CAACS,QAASC,SACnBD,QAAQE,iBAAiB,WAAYC,QAEjC,IAAkB,MAAdA,MAAMC,KAA8B,QAAdD,MAAMC,MAAkBD,MAAME,YAEpDF,MAAMG,iBAEuB,KAAzBN,QAAQO,MAAMC,QAAe,CAC7B,IAAIC,UAAYR,MAAQ,EAExB,KAAOQ,UAAYZ,KAAKa,QAAUb,KAAKY,WAAWE,UAAUC,SAAS,YACjEH,YAEJ,GAAIA,UAAYZ,KAAKa,OAAQ,CAEzB,IAAIG,QAAUhB,KAAKY,WACnBI,QAAQC,QACR,IAAIJ,OAASG,QAAQN,MAAMG,OAE3BG,QAAQE,kBAAkBL,OAAQA,QAC9Bb,KAAKY,WAAWE,UAAUC,SAAS,eACnCf,KAAKY,WAAWF,MAAQ,GACxBV,KAAKY,WAAWE,UAAUK,OAAO,aAExC,MAAUlB,aAEPA,YAAYgB,OAEpB,CAGJ,GAAkB,QAAdX,MAAMC,KAAiBD,MAAME,SAAU,CAEvCF,MAAMG,iBACN,IAAIW,UAAYhB,MAAQ,EAEpB,MAAsB,IAAfgB,WAAoBpB,KAAKoB,WAAWN,UAAUC,SAAS,YAC1DK,YAEJ,IAAmB,IAAfA,UAEcpB,KAAKoB,WACXH,QACJjB,KAAKoB,WAAWN,UAAUC,SAAS,eACnCf,KAAKoB,WAAWV,MAAQ,GACxBV,KAAKoB,WAAWN,UAAUK,OAAO,aAGjD,KAGJhB,QAAQE,iBAAiB,SAAS,KAC1BF,QAAQW,UAAUC,SAAS,eAC3BZ,QAAQO,MAAQ,GAChBP,QAAQW,UAAUK,OAAO,aAC7B,IAGAhB,QAAQW,UAAUC,SAAS,qBAE3BZ,QAAQE,iBAAiB,SAAS,WAC9BF,QAAQN,MAAMwB,MAAQ,OAEtBlB,QAAQN,MAAMwB,MAASlB,QAAQmB,YAAc,EAAK,IACtD,IAEAnB,QAAQoB,cAAc,IAAIC,MAAM,UACpC,GACF,GAGV,CAAC"}